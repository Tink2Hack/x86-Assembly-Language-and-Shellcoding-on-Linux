Moving data and examine variables

1.) Compile and link
kan1shka9@dev:~/Desktop/AL/3$ ls
compile.sh  MovingData.nasm
kan1shka9@dev:~/Desktop/AL/3$ ./compile.sh MovingData
[+] Assebling with Nasm ...
[+] Linking ...
[+] Done!
kan1shka9@dev:~/Desktop/AL/3$ ls
compile.sh  MovingData  MovingData.nasm  MovingData.o

2.) Run it in GDB
kan1shka9@dev:~/Desktop/AL/3$ gdb -q ./MovingData
Reading symbols from ./MovingData...(no debugging symbols found)...done.
(gdb) set disassembly-flavor intel
(gdb) break _start
Breakpoint 1 at 0x8048080
(gdb) run
Starting program: /home/kan1shka9/Desktop/AL/3/MovingData

Breakpoint 1, 0x08048080 in _start ()
(gdb) disassemble
Dump of assembler code for function _start:
=> 0x08048080 <+0>:     mov    eax,0xaaaaaa
   0x08048085 <+5>:     mov    al,0xbb
   0x08048087 <+7>:     mov    ah,0xcc
   0x08048089 <+9>:     mov    ax,0xdddd
   0x0804808d <+13>:    mov    ebx,0x0
   0x08048092 <+18>:    mov    ecx,0x0
   0x08048097 <+23>:    mov    ebx,eax
   0x08048099 <+25>:    mov    cl,al
   0x0804809b <+27>:    mov    ch,ah
   0x0804809d <+29>:    mov    cx,ax
   0x080480a0 <+32>:    mov    eax,0x0
   0x080480a5 <+37>:    mov    ebx,0x0
   0x080480aa <+42>:    mov    ecx,0x0
   0x080480af <+47>:    mov    al,ds:0x8049108
   0x080480b4 <+52>:    mov    ah,BYTE PTR ds:0x8049109
   0x080480ba <+58>:    mov    bx,WORD PTR ds:0x8049108
   0x080480c1 <+65>:    mov    ecx,DWORD PTR ds:0x8049108
   0x080480c7 <+71>:    mov    eax,0x33445566
   0x080480cc <+76>:    mov    ds:0x8049108,al
   0x080480d1 <+81>:    mov    ds:0x8049108,ax
   0x080480d7 <+87>:    mov    ds:0x8049108,eax
   0x080480dc <+92>:    mov    DWORD PTR ds:0x8049108,0x33445566
   0x080480e6 <+102>:   lea    eax,ds:0x8049108
   0x080480ec <+108>:   lea    ebx,[eax]
   0x080480ee <+110>:   mov    eax,0x11223344
   0x080480f3 <+115>:   mov    ebx,0xaabbccdd
   0x080480f8 <+120>:   xchg   ebx,eax
   0x080480f9 <+121>:   mov    eax,0x1
   0x080480fe <+126>:   mov    ebx,0x0
   0x08048103 <+131>:   int    0x80
End of assembler dump.
(gdb) help x
Examine memory: x/FMT ADDRESS.
ADDRESS is an expression for the memory address to examine.
FMT is a repeat count followed by a format letter and a size letter.
Format letters are o(octal), x(hex), d(decimal), u(unsigned decimal),
  t(binary), f(float), a(address), i(instruction), c(char), s(string)
  and z(hex, zero padded on the left).
Size letters are b(byte), h(halfword), w(word), g(giant, 8 bytes).
The specified number of objects of the specified size are printed
according to the format.

Defaults for format and size letters are those previously used.
Default count is 1.  Default address is following last thing printed
with this command or "print".
(gdb) x/8xb &sample
0x8049108:      0xaa    0xbb    0xcc    0xdd    0xee    0xff    0x11    0x22
(gdb) define hook-stop
Type commands for definition of "hook-stop".
End with a line saying just "end".
>print/x $eax
>print/x $ebx
>print/x $ecx
>x/8xb &sample
>disassemble $eip,+10
>end
(gdb) disassemble $eip,+10
Dump of assembler code from 0x8048080 to 0x804808a:
=> 0x08048080 <_start+0>:       mov    eax,0xaaaaaa
   0x08048085 <_start+5>:       mov    al,0xbb
   0x08048087 <_start+7>:       mov    ah,0xcc
   0x08048089 <_start+9>:       mov    ax,0xdddd
End of assembler dump.
(gdb) nexti
$1 = 0xaaaaaa
$2 = 0x0
$3 = 0x0
0x8049108:      0xaa    0xbb    0xcc    0xdd    0xee    0xff    0x11    0x22
Dump of assembler code from 0x8048085 to 0x804808f:
=> 0x08048085 <_start+5>:       mov    al,0xbb
   0x08048087 <_start+7>:       mov    ah,0xcc
   0x08048089 <_start+9>:       mov    ax,0xdddd
   0x0804808d <_start+13>:      mov    ebx,0x0
End of assembler dump.
0x08048085 in _start ()
(gdb)
$4 = 0xaaaabb
$5 = 0x0
$6 = 0x0
0x8049108:      0xaa    0xbb    0xcc    0xdd    0xee    0xff    0x11    0x22
Dump of assembler code from 0x8048087 to 0x8048091:
=> 0x08048087 <_start+7>:       mov    ah,0xcc
   0x08048089 <_start+9>:       mov    ax,0xdddd
   0x0804808d <_start+13>:      mov    ebx,0x0
End of assembler dump.
0x08048087 in _start ()
(gdb)
$7 = 0xaaccbb
$8 = 0x0
$9 = 0x0
0x8049108:      0xaa    0xbb    0xcc    0xdd    0xee    0xff    0x11    0x22
Dump of assembler code from 0x8048089 to 0x8048093:
=> 0x08048089 <_start+9>:       mov    ax,0xdddd
   0x0804808d <_start+13>:      mov    ebx,0x0
   0x08048092 <_start+18>:      mov    ecx,0x0
End of assembler dump.
0x08048089 in _start ()
(gdb) nexti
$10 = 0xaadddd
$11 = 0x0
$12 = 0x0
0x8049108:      0xaa    0xbb    0xcc    0xdd    0xee    0xff    0x11    0x22
Dump of assembler code from 0x804808d to 0x8048097:
=> 0x0804808d <_start+13>:      mov    ebx,0x0
   0x08048092 <_start+18>:      mov    ecx,0x0
End of assembler dump.
0x0804808d in _start ()
(gdb)
$13 = 0xaadddd
$14 = 0x0
$15 = 0x0
0x8049108:      0xaa    0xbb    0xcc    0xdd    0xee    0xff    0x11    0x22
Dump of assembler code from 0x8048092 to 0x804809c:
=> 0x08048092 <_start+18>:      mov    ecx,0x0
   0x08048097 <_start+23>:      mov    ebx,eax
   0x08048099 <_start+25>:      mov    cl,al
   0x0804809b <_start+27>:      mov    ch,ah
End of assembler dump.
0x08048092 in _start ()
(gdb)
$16 = 0xaadddd
$17 = 0x0
$18 = 0x0
0x8049108:      0xaa    0xbb    0xcc    0xdd    0xee    0xff    0x11    0x22
Dump of assembler code from 0x8048097 to 0x80480a1:
=> 0x08048097 <_start+23>:      mov    ebx,eax
   0x08048099 <_start+25>:      mov    cl,al
   0x0804809b <_start+27>:      mov    ch,ah
   0x0804809d <_start+29>:      mov    cx,ax
   0x080480a0 <_start+32>:      mov    eax,0x0
End of assembler dump.
0x08048097 in _start ()
(gdb)
$19 = 0xaadddd
$20 = 0xaadddd
$21 = 0x0
0x8049108:      0xaa    0xbb    0xcc    0xdd    0xee    0xff    0x11    0x22
Dump of assembler code from 0x8048099 to 0x80480a3:
=> 0x08048099 <_start+25>:      mov    cl,al
   0x0804809b <_start+27>:      mov    ch,ah
   0x0804809d <_start+29>:      mov    cx,ax
   0x080480a0 <_start+32>:      mov    eax,0x0
End of assembler dump.
0x08048099 in _start ()
(gdb)
$22 = 0xaadddd
$23 = 0xaadddd
$24 = 0xdd
0x8049108:      0xaa    0xbb    0xcc    0xdd    0xee    0xff    0x11    0x22
Dump of assembler code from 0x804809b to 0x80480a5:
=> 0x0804809b <_start+27>:      mov    ch,ah
   0x0804809d <_start+29>:      mov    cx,ax
   0x080480a0 <_start+32>:      mov    eax,0x0
End of assembler dump.
0x0804809b in _start ()
(gdb)
$25 = 0xaadddd
$26 = 0xaadddd
$27 = 0xdddd
0x8049108:      0xaa    0xbb    0xcc    0xdd    0xee    0xff    0x11    0x22
Dump of assembler code from 0x804809d to 0x80480a7:
=> 0x0804809d <_start+29>:      mov    cx,ax
   0x080480a0 <_start+32>:      mov    eax,0x0
   0x080480a5 <_start+37>:      mov    ebx,0x0
End of assembler dump.
0x0804809d in _start ()
(gdb)
$28 = 0xaadddd
$29 = 0xaadddd
$30 = 0xdddd
0x8049108:      0xaa    0xbb    0xcc    0xdd    0xee    0xff    0x11    0x22
Dump of assembler code from 0x80480a0 to 0x80480aa:
=> 0x080480a0 <_start+32>:      mov    eax,0x0
   0x080480a5 <_start+37>:      mov    ebx,0x0
End of assembler dump.
0x080480a0 in _start ()
(gdb)
$31 = 0x0
$32 = 0xaadddd
$33 = 0xdddd
0x8049108:      0xaa    0xbb    0xcc    0xdd    0xee    0xff    0x11    0x22
Dump of assembler code from 0x80480a5 to 0x80480af:
=> 0x080480a5 <_start+37>:      mov    ebx,0x0
   0x080480aa <_start+42>:      mov    ecx,0x0
End of assembler dump.
0x080480a5 in _start ()
(gdb)
$34 = 0x0
$35 = 0x0
$36 = 0xdddd
0x8049108:      0xaa    0xbb    0xcc    0xdd    0xee    0xff    0x11    0x22
Dump of assembler code from 0x80480aa to 0x80480b4:
=> 0x080480aa <_start+42>:      mov    ecx,0x0
   0x080480af <_start+47>:      mov    al,ds:0x8049108
End of assembler dump.
0x080480aa in _start ()
(gdb)
$37 = 0x0
$38 = 0x0
$39 = 0x0
0x8049108:      0xaa    0xbb    0xcc    0xdd    0xee    0xff    0x11    0x22
Dump of assembler code from 0x80480af to 0x80480b9:
=> 0x080480af <_start+47>:      mov    al,ds:0x8049108
   0x080480b4 <_start+52>:      mov    ah,BYTE PTR ds:0x8049109
End of assembler dump.
0x080480af in _start ()
(gdb)
$40 = 0xaa
$41 = 0x0
$42 = 0x0
0x8049108:      0xaa    0xbb    0xcc    0xdd    0xee    0xff    0x11    0x22
Dump of assembler code from 0x80480b4 to 0x80480be:
=> 0x080480b4 <_start+52>:      mov    ah,BYTE PTR ds:0x8049109
   0x080480ba <_start+58>:      mov    bx,WORD PTR ds:0x8049108
End of assembler dump.
0x080480b4 in _start ()
(gdb)
$43 = 0xbbaa
$44 = 0x0
$45 = 0x0
0x8049108:      0xaa    0xbb    0xcc    0xdd    0xee    0xff    0x11    0x22
Dump of assembler code from 0x80480ba to 0x80480c4:
=> 0x080480ba <_start+58>:      mov    bx,WORD PTR ds:0x8049108
   0x080480c1 <_start+65>:      mov    ecx,DWORD PTR ds:0x8049108
End of assembler dump.
0x080480ba in _start ()
(gdb)
$46 = 0xbbaa
$47 = 0xbbaa
$48 = 0x0
0x8049108:      0xaa    0xbb    0xcc    0xdd    0xee    0xff    0x11    0x22
Dump of assembler code from 0x80480c1 to 0x80480cb:
=> 0x080480c1 <_start+65>:      mov    ecx,DWORD PTR ds:0x8049108
   0x080480c7 <_start+71>:      mov    eax,0x33445566
End of assembler dump.
0x080480c1 in _start ()
(gdb)
$49 = 0xbbaa
$50 = 0xbbaa
$51 = 0xddccbbaa
0x8049108:      0xaa    0xbb    0xcc    0xdd    0xee    0xff    0x11    0x22
Dump of assembler code from 0x80480c7 to 0x80480d1:
=> 0x080480c7 <_start+71>:      mov    eax,0x33445566
   0x080480cc <_start+76>:      mov    ds:0x8049108,al
End of assembler dump.
0x080480c7 in _start ()
(gdb)
$52 = 0x33445566
$53 = 0xbbaa
$54 = 0xddccbbaa
0x8049108:      0xaa    0xbb    0xcc    0xdd    0xee    0xff    0x11    0x22
Dump of assembler code from 0x80480cc to 0x80480d6:
=> 0x080480cc <_start+76>:      mov    ds:0x8049108,al
   0x080480d1 <_start+81>:      mov    ds:0x8049108,ax
End of assembler dump.
0x080480cc in _start ()
(gdb)
$55 = 0x33445566
$56 = 0xbbaa
$57 = 0xddccbbaa
0x8049108:      0x66    0xbb    0xcc    0xdd    0xee    0xff    0x11    0x22
Dump of assembler code from 0x80480d1 to 0x80480db:
=> 0x080480d1 <_start+81>:      mov    ds:0x8049108,ax
   0x080480d7 <_start+87>:      mov    ds:0x8049108,eax
End of assembler dump.
0x080480d1 in _start ()
(gdb)
$58 = 0x33445566
$59 = 0xbbaa
$60 = 0xddccbbaa
0x8049108:      0x66    0x55    0xcc    0xdd    0xee    0xff    0x11    0x22
Dump of assembler code from 0x80480d7 to 0x80480e1:
=> 0x080480d7 <_start+87>:      mov    ds:0x8049108,eax
   0x080480dc <_start+92>:      mov    DWORD PTR ds:0x8049108,0x33445566
End of assembler dump.
0x080480d7 in _start ()
(gdb)
$61 = 0x33445566
$62 = 0xbbaa
$63 = 0xddccbbaa
0x8049108:      0x66    0x55    0x44    0x33    0xee    0xff    0x11    0x22
Dump of assembler code from 0x80480dc to 0x80480e6:
=> 0x080480dc <_start+92>:      mov    DWORD PTR ds:0x8049108,0x33445566
End of assembler dump.
0x080480dc in _start ()
(gdb)
$64 = 0x33445566
$65 = 0xbbaa
$66 = 0xddccbbaa
0x8049108:      0x66    0x55    0x44    0x33    0xee    0xff    0x11    0x22
Dump of assembler code from 0x80480e6 to 0x80480f0:
=> 0x080480e6 <_start+102>:     lea    eax,ds:0x8049108
   0x080480ec <_start+108>:     lea    ebx,[eax]
   0x080480ee <_start+110>:     mov    eax,0x11223344
End of assembler dump.
0x080480e6 in _start ()
(gdb)
$67 = 0x8049108
$68 = 0xbbaa
$69 = 0xddccbbaa
0x8049108:      0x66    0x55    0x44    0x33    0xee    0xff    0x11    0x22
Dump of assembler code from 0x80480ec to 0x80480f6:
=> 0x080480ec <_start+108>:     lea    ebx,[eax]
   0x080480ee <_start+110>:     mov    eax,0x11223344
   0x080480f3 <_start+115>:     mov    ebx,0xaabbccdd
End of assembler dump.
0x080480ec in _start ()
(gdb)
$70 = 0x8049108
$71 = 0x8049108
$72 = 0xddccbbaa
0x8049108:      0x66    0x55    0x44    0x33    0xee    0xff    0x11    0x22
Dump of assembler code from 0x80480ee to 0x80480f8:
=> 0x080480ee <_start+110>:     mov    eax,0x11223344
   0x080480f3 <_start+115>:     mov    ebx,0xaabbccdd
End of assembler dump.
0x080480ee in _start ()
(gdb)
$73 = 0x11223344
$74 = 0x8049108
$75 = 0xddccbbaa
0x8049108:      0x66    0x55    0x44    0x33    0xee    0xff    0x11    0x22
Dump of assembler code from 0x80480f3 to 0x80480fd:
=> 0x080480f3 <_start+115>:     mov    ebx,0xaabbccdd
   0x080480f8 <_start+120>:     xchg   ebx,eax
   0x080480f9 <_start+121>:     mov    eax,0x1
End of assembler dump.
0x080480f3 in _start ()
(gdb)
$76 = 0x11223344
$77 = 0xaabbccdd
$78 = 0xddccbbaa
0x8049108:      0x66    0x55    0x44    0x33    0xee    0xff    0x11    0x22
Dump of assembler code from 0x80480f8 to 0x8048102:
=> 0x080480f8 <_start+120>:     xchg   ebx,eax
   0x080480f9 <_start+121>:     mov    eax,0x1
   0x080480fe <_start+126>:     mov    ebx,0x0
End of assembler dump.
0x080480f8 in _start ()
(gdb)
$79 = 0xaabbccdd
$80 = 0x11223344
$81 = 0xddccbbaa
0x8049108:      0x66    0x55    0x44    0x33    0xee    0xff    0x11    0x22
Dump of assembler code from 0x80480f9 to 0x8048103:
=> 0x080480f9 <_start+121>:     mov    eax,0x1
   0x080480fe <_start+126>:     mov    ebx,0x0
End of assembler dump.
0x080480f9 in _start ()
(gdb)
$82 = 0x1
$83 = 0x11223344
$84 = 0xddccbbaa
0x8049108:      0x66    0x55    0x44    0x33    0xee    0xff    0x11    0x22
Dump of assembler code from 0x80480fe to 0x8048108:
=> 0x080480fe <_start+126>:     mov    ebx,0x0
   0x08048103 <_start+131>:     int    0x80
   0x08048105:  add    BYTE PTR [eax],al
   0x08048107:  add    BYTE PTR [edx-0x11223345],ch
End of assembler dump.
0x080480fe in _start ()
(gdb)
$85 = 0x1
$86 = 0x0
$87 = 0xddccbbaa
0x8049108:      0x66    0x55    0x44    0x33    0xee    0xff    0x11    0x22
Dump of assembler code from 0x8048103 to 0x804810d:
=> 0x08048103 <_start+131>:     int    0x80
   0x08048105:  add    BYTE PTR [eax],al
   0x08048107:  add    BYTE PTR [edx-0x11223345],ch
End of assembler dump.
0x08048103 in _start ()
(gdb) c
Continuing.
[Inferior 1 (process 4374) exited normally]
Error while running hook_stop:
No registers.

3.) Run it in GDB using display
kan1shka9@dev:~/Desktop/AL/3$ gdb -q ./MovingData
Reading symbols from ./MovingData...(no debugging symbols found)...done.
(gdb) display/x $eax
(gdb) display/x $ebx
(gdb) display/x $ecx
(gdb)
(gdb) break _start
Breakpoint 1 at 0x8048080
(gdb) run
Starting program: /home/kan1shka9/Desktop/AL/3/MovingData

Breakpoint 1, 0x08048080 in _start ()
3: /x $ecx = 0x0
2: /x $ebx = 0x0
1: /x $eax = 0x0
(gdb) nexti
0x08048085 in _start ()
3: /x $ecx = 0x0
2: /x $ebx = 0x0
1: /x $eax = 0xaaaaaa
(gdb) define hook-stop
Type commands for definition of "hook-stop".
End with a line saying just "end".
>disassemble $eip,+10
>end
(gdb) nexti
Dump of assembler code from 0x8048087 to 0x8048091:
=> 0x08048087 <_start+7>:       mov    $0xcc,%ah
   0x08048089 <_start+9>:       mov    $0xdddd,%ax
   0x0804808d <_start+13>:      mov    $0x0,%ebx
End of assembler dump.
0x08048087 in _start ()
3: /x $ecx = 0x0
2: /x $ebx = 0x0
1: /x $eax = 0xaaaabb
(gdb) set disassembly-flavor intel
(gdb) nexti
Dump of assembler code from 0x8048089 to 0x8048093:
=> 0x08048089 <_start+9>:       mov    ax,0xdddd
   0x0804808d <_start+13>:      mov    ebx,0x0
   0x08048092 <_start+18>:      mov    ecx,0x0
End of assembler dump.
0x08048089 in _start ()
3: /x $ecx = 0x0
2: /x $ebx = 0x0
1: /x $eax = 0xaaccbb
(gdb)
Dump of assembler code from 0x804808d to 0x8048097:
=> 0x0804808d <_start+13>:      mov    ebx,0x0
   0x08048092 <_start+18>:      mov    ecx,0x0
End of assembler dump.
0x0804808d in _start ()
3: /x $ecx = 0x0
2: /x $ebx = 0x0
1: /x $eax = 0xaadddd